; Copyright (C) 2017 Daniel Page <dan@phoo.org>
;
; Use of this source code is restricted per the CC BY-SA license, a copy of
; which can be found via http://creativecommons.org (and should be included 
; as LICENSE.txt within the associated archive or repository).

; =============================================================================

; This is the global configuration file for SCALE, which is used internally 
; by the build process and *also* distilled into various output formats for 
; use elsewhere.
;
; 1. Each challenge is controlled via content in a section, the identifier
;    of which a) guides naming of parameters in distilled output, but also
;    b) is independent from where (i.e., the path) the associated material 
;    is stored.
;  
; 2. Each section has a number of parameters, specified as
;
;    <identifier> = <value>
;
;    but subject to some rules:
;
;    - The parameter identifier is post-processed to ensure validity wrt. 
;      any output format.
;    - The parameter value      is post-processed to ensure validity wrt. 
;      any output format.  An example would be the translation of Boolean
;      values (i.e., true and false) into 0 and 1, st. a C pre-processor
;      can form conditions (since it can't deal with string comparison).
;    - Where the parameter value is a list, it should be separated using
;      whitespace.      
;    - Where the parameter value is a file name (or list thereof), it can 
;      include environment variables or wildcards which will be expanded.

; =============================================================================

[global]

; This parameter produces a list of identifiers (which need to be usable as
; file names) representing users SCALE should generate challenges for.  Two
; ways to specify this list are valid, i.e., as
;
; - a list of identifiers, or
; - a single file name from which the identifiers are read (one per line).

users        = alice bob

; This parameter produces a list of path names, each of which specifies the
; location of some challenge material (i.e., the source code).
 
challenges   = ${REPO_HOME}/src/scale/password ${REPO_HOME}/src/scale/{aes,des,rsa,ecc}_* 

; Enable/disable any debugging functionality available.

debug        = false

; Enable/disable (weak, XOR-based) obfuscation of data within executables.

obfuscate    = true

; The PRNGs are seeded with the user and challenge identifiers; this field 
; optionally allows a further input, e.g., to allow diversity across uses.

seed         = 

; Set min/maximum number of optional exam-style questions. 

optional_min = 2 
optional_max = 2

; =============================================================================

[password]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf               %.T %.R 
archive_path = password

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

len_P_min    =  6
len_P_max    = 10

; Decide whether the password, and hence guesses, are binary (meaning octet
; strings of arbitraty bytes), or ascii (strings of printable characters).

alphabet     = ascii

; =============================================================================

[aes_fault]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam        %.T     
archive_path = aes_fault

; Allow or disallow the occurance of zero-valued faults, i.e., values of
; \delta = 0 (meaning s_{i,j} \XOR \delta = s_{i,j}, so there is no fault 
; (even though an attempt to induce one was made).

allow_zero   = true

; -----------------------------------------------------------------------------

[aes_padding]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam %.conf %.T     
archive_path = aes_padding

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

log_m_min    = 128
log_m_max    = 256

; Set how the challenge plaintext message is generated: the options are
;
; - uid_hash => SHA-1 hash of the user identifier plus randomness
; - uid_text =>               raw user identifier plus randomness
; -     rand =>                                   only randomness
;
; In a sense the method selected makes little difference, other than the
; fact that the latter makes validating the target material harder.

challenge    = uid_hash

; -----------------------------------------------------------------------------

[aes_power]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam        %.T %.R 
archive_path = aes_power

; At a high level, this challenge can be configured as one of two versions
; which relate to the mode of operation used:
;
; - ecb_enc => easy(er) version: target device does ECB-mode AES encrypt
; - ecb_dec => easy(er) version: target device does ECB-mode AES decrypt
; - xts     => hard(er) version: target device does XTS-AES      decrypt
;
; How *much* harder the latter is is debatable of course, but the  idea is 
; to reduce any opportunity to follow tutorials etc. by rote.

version      = xts

; Set the noise level, i.e., amount of randomness added to simulate the 
; effect of noise on acquisitions: setting the minimum and maximum both 
; to zero obviously means no noise.

noise_min    =  0
noise_max    = 10

; -----------------------------------------------------------------------------

[aes_timing]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam        %.T %.R 
archive_path = aes_timing

; Set the noise level, i.e., amount of randomness added to simulate the 
; effect of noise on acquisitions: setting the minimum and maximum both 
; to zero obviously means no noise.

noise_min    = 0
noise_max    = 0

; =============================================================================

[des_cache]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam        %.T %.R 
archive_path = des_cache

; Set the noise level, i.e., amount of randomness added to simulate the 
; effect of noise on acquisitions: setting the minimum and maximum both 
; to zero obviously means no noise.

noise_min    = 0
noise_max    = 0

; =============================================================================

[ecc_invalid]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam        %.T
archive_path = ecc_invalid

; Not that it alters the attack per se, but this parameter allows selection
; of the curve used from the set
;
; E \in { nist-p-192, nist-p-224, nist-p-256, nist-p-384, nist-p-521 }

curve        = nist-p-256

; =============================================================================

[rsa_bug]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam %.conf %.T     
archive_path = rsa_bug

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

log_N_min    = 1024
log_N_max    = 1024
log_d_min    =   64
log_d_max    =   64

; Set n-bit values of x and y operand which trigger the simulated bug.

poisoned_n   =   16
poisoned_x   = DEAD 
poisoned_y   = BEEF

; =============================================================================

[rsa_fault]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam %.conf %.T     
archive_path = rsa_fault

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

log_N_min    = 1024
log_N_max    = 1024

; -----------------------------------------------------------------------------

[rsa_padding]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam %.conf %.T     
archive_path = rsa_padding

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

log_N_min    = 1024
log_N_max    = 1024
log_m_min    =  128
log_m_max    =  256
log_L_min    =  128
log_L_max    =  128

; Appendix B.2 of RFC 3447 provides one mask generation function, namely 
; MGF1: the implementation uses this, but allows parameterisation via an
; underlying hash function.  Options follow the "recommended choices" in
; Appendix B.1., i.e., SHA-1 or SHA-256/384/512.

hash         = sha1

; Set how the challenge plaintext message is generated: the options are
;
; - uid_hash => SHA-1 hash of the user identifier plus randomness
; - uid_text =>               raw user identifier plus randomness
; -     rand =>                                   only randomness
;
; In a sense the method selected makes little difference, other than the
; fact that the latter makes validating the target material harder.

challenge    = uid_hash

; -----------------------------------------------------------------------------

[rsa_timing]

; Specify the material to include in each distribution archive, and what
; path within said archive to copy it into.

archive_glob = %.pdf %.exam %.conf %.T %.R 
archive_path = rsa_timing

; Limit various parameters wrt. their length: min = max fixes the length,
; whereas any min < max implies a random selection in that range.

log_N_min    = 1024
log_N_max    = 1024
log_d_min    =   64
log_d_max    =   64

; Set the noise level, i.e., amount of randomness added to simulate the 
; effect of noise on acquisitions: setting the minimum and maximum both 
; to zero obviously means no noise.

noise_min    =    0
noise_max    =   20

; =============================================================================
